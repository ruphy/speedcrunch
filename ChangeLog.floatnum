2007-12-06
bug fixes
fine tuning

floaterf
- recent changes introduced a bug in _erf for large x. Fixed
floatseries
- testing revealed: erfcsum could die if the working precision fell
  below 1 before the final loop was executed. Fixed.
- fine tuned the precision parameters in erfcsum
testfloatnum
- added a test suite for erfcsum

2007-12-05
fine tuning

floatseries:
- adjusted the working precision such, that the relative error of
  the asymptotic series of erfc is below 1e-99 for a 100-digit
  evaluation
floaterf
- sharper evaluation of the lower bound for the asymptotic series
  based on a theoretical analysis
- correct error reporting in _erfc
testfloatnum
- added a test suite for erfcasymptotic

2007-12-02
fine tuning

floatseries:
- the asymptotic series for erfc accumulated round-off
  errors. increased the working precision in the loop by one.

2007-11-30
bug fix

floaterf
- fixed wrong evaluation of erf for 0.5 < x < 1

2007-11-29
erf and erfc implemented, but rigorous testing and fine tuning
are not done

floaterf
- completed functions _erf and _erfc
floatconst
- several new constants and working space for the erfc function

2007-11-28
started implementing the erf function:
Taylor series for erf

floaterf
- new file containing erf related functions
floatconst
- new constant 2/sqrt(pi) used for the erf function
floatseries
- added Taylor series for sqrt(pi)*erf(x)/2
- added asymptotic series for erfc 
floathmath
- added float_erf
- added float_erfc

2007-11-20
comments

floatnum.h
- minor style change in comments

2007-10-30
relax behaviour of float_setexponent

floatnum:
- it's convenient if you can assign any exponent to a
  zero (without effect), regardless of the valid exponent
  range. Reworked float_setexponent accordingly.
testfloatnum:
- adjusted testfloatnum to reflect the change

2007-08-30
fix error reporting
rename a couple of functions
more and better tests

floatnum
- float_round takes a dest parameter
- fix error reporting of float_round
- fix error reporting of float_int
- rename float_changesign -> float_neg
- rename float_clone -> float_copy
testfloatnum
- added tests for float_move
- new (extended) test routine for float_round

2007-08-29
bugfix: new tests uncovered a memory leak
more tests

floatnum
- fix memory leak in float_clone
testfloatnum
- better and more tests

2007-08-28
start testing error behaviour
more tests

floatcommon
- const modifier for parameter in setasciiz
floatnum
- make float_clone sensitive to maxdigits

2007-08-26
allow modification of the precision limit
get rid of float_setbcnum: do not expose too much of the
  internals in the interface
more tests

floatnum
- update comments
- simplify float_setrange
- new functions float_setprecision and float_getprecision
- remove float_setbcnum
- rewrite float_setinteger to not use float_setbcnum
testfloatnum
- remove test cases for float_setbcnum
- rewrite test_divmod so it does not use float_setbcnum
- more tests

2007-08-23
bugfix, extend testcases
a new set of test cases uncovered a bug in float_setsignificand

floatcommon
- refer to the variable maxdigits instead of the constant MAXDIGITS
floatnum
- make maxdigits mutable
- bugfix in float_setsignificand (digit count could be off by one in
    rare encountered special cases)
testfloatnum
- more test cases

2007-08-11
extend test cases

testfloatnum
- extend tests of test_getexponent to extreme values

2007-08-10
refactor, extend test cases

floatconvert
- pack2floatnum: simplify a bit, uses variable range limits now
testfloatnum
- started refactoring testcase handling
- {long,check}{add,mul}: check reverse order of arguments automatically
- bugfix: tc_checkadd, tc_checkmul: check expression was wrong, rendering
  the tests useless
- added some corner case tests to test_longarray{add,mul},
  test_setnan, test_setzero, test_isnan, test_iszero

2007-08-09
sometimes it would be nice if temporary results could exceed the overflow
underflow limit. Make these limits variable.
Rename this file to ChangeLog.floatnum.

floatnum
- introduce a variable overflow/underflow limit. New functions float_setrange
  and float_isvalidexp

2007-08-01
comments, refactor

floatconst, floatgamma
- simplify a bit by merging two constants
floatconfig
- changed some comments

2007-07-31
refactor, comments

floatgamma
- added some comments
- minor refactoring

2007-07-30
bugfix, extension of nCr

floathmath
- extend the range of nCr towards big integers by using lnGamma
floatseries
- bugfix: lnGamma returned NaN on extreme large arguments
  (> 1e43).

2007-07-29
compatibility issues, refactor

floatcommon
- new function float_roundtoint
hmath
- make trunc and round work more like current SpeedCrunch
  0.8 implementation
- enable engineering format
- check unstable evaluation near poles and zeros:
  underflow to zero or set NaN
floatconvert
- refactor: use float_roundtoint

2007-07-28
bugfixes

hmath
- break conditions in loop of cbrt were often missed.
  rewrote cbrt and used adapting precision and
  exponent extraction.
- implement fall back behaviour in formatFixed.
  formatFixed falls back to scientific format, if
  it cannot display large or tiny values

2007-07-27
bugfix, refactor, comments, checking memory leaks

floatconfig
- make DECPRECISION user-definable. MATHPRECISION is the maximum
  precision of the math library, the user cannot change that
- made comments reflect the new meaning
hmath
- The algorithm in HMath::cbrt could overflow.
  Applied some low level improvements, that not only fixed this,
  but also improved performance.
- removed a define HMATH_MAX_PREC
- let + and - underflow to zero in case of almost full cancellation
floathmath
- trigonometric functions now report FLOAT_UNSTABLE, if fed with
  a large value > 10^DECPRECISION
floatnum
- refactor: was no leak, but always call float_free when float_create
            is called.
floatconvert
- refactor: was no leak, but always call float_free when float_create
            is called.
- checked all memory allocations, seems to be free of mem leaks
floatconst
- add a floatmath_exit routine, that releases all constants
  not needed so far, but want to have a complete interface
floatseries
- fixed a memory leak in an error path (that should never be reached,
  but anyway)
floattrig, floathmath, floatcommon, floatexp, floatgamma, floatipower,
floatlog, floatpower, floatlong, floatio, hmath
- checked all floatnum memory allocations, seem to be free of mem leaks

2007-07-25
bugfixes, comments
refactor: finally got the ioparam stuff out of the core. It
          is free of grammar information now, except that digit
          sequences are ASCII sequences in big-endian format.
          This is not going to be eliminated, because almost all
          clients (scanners) will have digit sequences in this
          format (or can easily convert it to it).

floattrig
- fixed a comparison in _arctan: An optimization was
  completely skipped. Now arctan runs a bit faster when x > 1
  and does not choke on an endless loop any more
  when arguments are really huge (> 1e100000000)
- create an early out path in _arcsinlt1 so that this function
  does not underflow on extremely tiny arguments
floathmath
- fixed comparisons in float_arcsin, float_arccos and
  float_arccosxplus1. They did not recognize the error case
  |x| > 1 before
floatio
- added or modified comments
- refactor: _str2seq: rename match into leadingdigit
- refactor: _int2str: remove unnecessary code, leave n unmodified,
            get rid of getioparams
- refactor: _clearprefix has only one caller and is trivial, so get
            rid of it
- refactor: _exp2desc: _int2str does not query ioparams any more
            so there is no need to set the default ioparams
            some minor changes

2007-07-22
refactor, removed all fall back behaviour in IO.

floatio
- refactor: let the caller of str2int set the prefix
floatconvert
- refactor: simplify _outeng
            no _out* has fall back behaviour any more, it returns an error
            instead
testfloatnum
- removed a few test cases, that tested fall back behavior

2007-07-21
refactor
buffer overrun checking completed

floatio:
- added comments
- refactor: new type t_buffer, to allow overflow checking
- refactor: make all digit sequence handlers use t_buffer
- refactor: encode* was called only once, include the code in caller
- refactor: all *2str functions report error in case of buffer overflow
- refactor: get all the t_ioparams stuff out of the core of floatnum
floatconvert:
- refactor: adjust _emptytokens to handle t_buffer
- refactor: all output handlers report buffer overflow
- refactor: get all the t_ioparams stuff out of the core of floatnum
- refactor: get all fallback logic out of the core of floatnum
- bug fix: fixed memory leak in error path
hmath:
- refactor: doFormat uses t_buffer now
testfloatnum:
- adapt test cases to new interface

2007-07-20
refactor, comment

hmath
- use IO_FLAG_SHOW_BASE and IO_FLAG_SHOW_EXPBASE
- cattokens needs no buffer for sign encoding
floatio
- started commenting
- refactor: rename leading0 to leadingSignDigits in t_seq_desc
- refactor: Flags IO_FLAG_SHOW_NONDEC_BASE and IO_FLAG_SHOW_NONDEC_EXPBASE
  replaced by saner IO_FLAG_SHOW_BASE and IO_FLAG_SHOW_EXPBASE
- refactor: make _significantdigits public, as it can be used in floatconvert
- refactor: input: restrict knowledge about sign characters to the parser only
- refactor: input: do not separate complement information from sign information
- refactor: input: restrict knowledge about basetags to the parser only
- refactor: input: sanitize maxdigits handling
- refactor: input: reduce dependancies, only the parser knows about t_ioparams
- refactor: output: restrict knowledge about sign characters to outermost cattokens only
- refactor: output: do not separate complement information from sign information
- refactor: output: restrict knowledge about basetags to the cattokens only
- refactor: output: pass base of exponent directly to float_out
- refactor: started implementing buffer overrun checking
floatconvert
- refactor: rename leading0 to leadingSignDigits in t_seq_desc
- refactor: use _significantdigits

2007-07-18
bug fix
provide an INSTALL file for those curious enough to try floatnum

floatconvert
- to convert really huge numbers, a constant in _lg2 needs to be
  specified more precisely.

2007-07-17
got floatnum running under SpeedCrunch!
first bug fixes

hmath
- bug fix: operator>> should use float_shr, not float_shl
- get rid of HMATH_COMPARE_PREC
- for 80 digits precision, a working precision of 83 is sufficient
- general mode for non-decimal bases has now fractions equivalent
  to HMATH_MAX_SHOWN
floatgamma
- _lngamma, _gamma return NaN in all error cases
- refactor: rename _lngamma_ext to _ln_gamma_prim
- refactor: lngamma_prim: separate pos x handling from neg x
- refactor: remove special cases x==1, x==2 from _lngamma_prim
- refactor: _pochhammer: leave the pole detection to the subroutines.
floattrig
- bug fix: _trigreduce returned a non-zero value in case of error
floatio
- new flags IO_FLAG_SHOW_NONDEC_BASE and IO_FLAG_SHOW_NONDEC_EXPBASE

2007-07-16
finally the two-valued factorial of SpeedCrunch, which is
a rephrasing of the Pochhammer Symbol, which in turn can be
written as a quotient of two Gamma function values, is fully
supported.
That means, that the quotient does not necessarily overflow,
even if one of the Gamma values does, that cancellation
of poles is handled properly, and that neither the difference
of the arguments to the factorial nor any argument itself
need to be an integer.
Started merging the latest changes from 0.8

hmath
- added extra tests to nCr and nPr, because the redefined
  factorial would otherwise interpolate and extend both functions
  (e.g. nPr(-21, 2) == residue(Gamma(-22))/residue(Gamma(-20)) == 462
   and not NaN)
- added Gamma and lnGamma
- added logic operators
- added formatEngineering
- added constant phi and limited it to 130 digits
- added gcd
- added cot and friends
- added min/max
- added statistic functions
floatgamma
- evaluation of rising Pochhammer symbol, Gamma and ln Gamma are
  based on a primitive, that allows handling of poles, and
  negative values.
- ln Gamma is extended to negative arguments by redefining it
  as ln abs Gamma x

2007-07-15

CMakeList.txt
- added all floatnum files
- added compiler switch -g to allow easy debugging
testfloatnum
- typo: missing _ in _FLOATNUMTEST
- rewrote the test suite for the Pochhammer symbol
floatgamma
- refactoring: use _sinpix in several places
- in _pochhammer: corrected handling of poles in the denominator
- some bug fixes in _pochhammer
- replaced a few EXACT parameters, that lead to trouble with
  huge numbers
- in _ofs: no need to do evaluations using floatnum
floattrig
- moved evaluation of sin(pi*x) here
floatcommon
- this was needed in several places: float_isodd

2007-07-14
Added all higher functions to hmath
The Pochhammer symbol needs some testing

hmath
- refactoring: removed duplicated code
- pi value used from floatconst
- replaced higher mathematical functions by floatnum's functions
- introduced inverse functions of the hyperbolic functions
floathmath
- added float_raisei
- added float_lg
- added float_pochhammer
- bug fix in float_tan
floattrig
- bug fix in trigreduce
floatgamma
- removed a memory leak
- generalized the pochhammer symbol

2007-07-13
started reworking hmath, got a first version running.
The testhmath suite is almost completely passed. The few failures are
all explicable and do not really indicate a problem.

testfloatnum
- compile an empty program if _FLOATNUMTEST is not set
CMakeList.txt
- added some floatnum sources to testmath
- added floatipower to the sources list of testfloatnum
hmath
- rewritten to use floatnum
floatnum
- float_setsignificand, float_setscientific use const char* now
floatconvert
- some const modifiers added
- other minor changes
floatio.h
- added missing extern "C" tag
- removed include of floatnum.h, floatio is based on text only
- forked t_tokens into two almost identical structs, one for
  input, using const char*, the other for output, using char*
  many const modifiers needed for this
floatipower.c floatipower.h
- new files that contain all the power functions not using logarithms
  This way, conversion does not include all the high math stuff
floatpower.c floatpower.h
- moved all integer based power functions to floatipower

2007-07-12
first v0.01 release of floatnum
two io routines linking floatnums io to external parsers added
last issues connected to two's complement io are resolved.
only error and corner cases are not tested yet.

2007-07-10
again a rework of the io

floatlong.h floatlong.c
- removed unused _longintneg function

2007-07-05
major rework of io routines. Mostly floatio and floatconvert are effected,
but there are smaller improvements on other files as well. Base 10 output
seems to run, base 16 output has still to be tested thoroughly.

floatconfig.h
- fixed a bug due to typo
---
testfloatnum.c
- added new testcases
---
floatlong
- refactor: move t_longint and basic procedures here
---

2007-06-21
complete new input parser capable of parsing inputs of base 2, 8, 10 and 16

floatio.c floatio.h
- added new input parser
---
floatconvert.c floatconvert.h
- new conversion routines float_parse and float_str2num converting input
  strings to floatnum, bases 2, 8, 10 and 16 supported
---
testfloatnum.c
- added test cases of float_str2num
- added convergence tests of gamma series

2007-06-17
started input parsing

floatio.c floatio.h
- added several input parsing routines

2007-06-16
floatlogic.c
- removed unused _canconvert
- bug fix in floatnum2logic: removed memory leak
- bug fix in floatnum2logic: crashed when 0 < |x| < 1
---
floatio.c floatio.h
- new files containing all IO related stuff like character
  handling
- refactor: output routine significand2ascii
---
floatnum.c
- refactor: moving most of float_getsignificand to floatio
- deleted some unnecessary stuff in float_setsignificand

2007-06-15
Logic functions seem to be ok. I'm sure, some corner cases
are still lurking, that will make an operation fail, but on the whole...
Gamma function and family seem to be ok as well
Next, special output routines will be addressed. A standard
output routine is already available (for bases 10, 16, 8 and 2)
---
CMakeList.txt
- updated dependencies
---
number.c
- fixed a bug, bc_int2num could not convert the most negative integer
---
testfloatnum.c
- added test_pochhammer
- added test_lngamma
- added test_gamma
- added test_gammaint
- added test_gamma0_5
- added test_longint2floatnum;
- added test_floatnum2logic
- added test_logic2floatnum
- added test_not
- added test_and
- added test_or
- added test_xor
- added test_shl
- added test_shr
---
floatgamma.c
- bug fixed in _pochhammer
- added special case treatment in _lngamma for x == 1, x == 2
- adjusted working precision in _lngamma, _gamma
---
floatconst.c
- fixed a bug
- added constant cUnsignedBound
---
floatconvert.c floatconvert.h
- added reverse conversion _longint2floatnum
- added support for zero in floatnum2longint
---
floatlong.h floatlong.c
- added _longshl
---
floatcommon.h floatcommon.c
- boolean result type is char
---
floatlogic.c floatlogic.h
- new files containing a draft of logical operations
---
floathmath.c floathmath.h
- added float_not, float_and, float_or, float_xor, float_shr, float_shl

2007-06-14
conversion seems to run, at least in ordinary cases.
added a draft version of factorial computation.
testfloatnum.c
- added test cases to test_stdconvert
- added test_lngammaseries
---
floatconst.c
- added Bernoulli numbers to constant list
- added constant 12 and -20 to constant list
- extended precision of constants to 120
- added constant ln(sqrt(2*pi))
- added constant sqrt(pi)
---
floatseries.h floatseries.c
- added lngammaseries
---
floatgamma.c floatgamma.h
- draft version of _gamma, _lngamma, _pochhammer, _gammaint, _gamma0_5
---
floattrig.c floattrig.h
- boolean result type char
---
floatexp.h floatexp.c
- boolean result type char
- added new function _power10
---
floatnum.h floatnum.c
- boolean result type char
- removed test_floatnum declaration
---
floatpower.h floatpower.c
- boolean result type char
---
floathmath.h floathmath.c
- boolean result type char
- added functions float_power10, float_gamma
---
floatcommon.c floatcommon.h
- added float_asinteger

2007-06-13
the conversion algorithm is in many parts ok, a lot of test cases
are handled correctly. Some tests are still outstanding
ChangeLog (this file)
- reverted the order of entries. It is better to have the latest
  at the beginning
---
floatconvert.c floatconvert.h
- renamed u_array to t_uarray
- renamed t_bigint to t_longint
- reworked interfaces to use t_longint
- introduced a new struct t_convert to hold an intermediate conversion state
- reworked interfaces to use t_convert
- rewrote many parts
- bug fix: half size of UARRAYLG is big enough, because a char contains 2
  hexdigits
- fixed several bugs in the conversion algotithm
---
floatconfig.h
- adding a comment explaining the limit on BITS_IN_EXP
---
testfloatnum
- adapted test cases to interface changes
- added test cases for _stdconvert

2007-06-12
tying together the parts to implement a draft conversion algorithm
For the moment, to hex only, and to intermediate data structures

CMakeList.txt
- updated dependencies
---
floatconst.h floatconst.c
- added constant 16 for conversion
---
floatconvert.h floatconvert.c
- declared t_bigint, to be used later
- implemented a draft version of a hex conversion algorithm, has to be tested
---
floatgamma.c floatgamma.h
- introduced empty templates to the code base.
  After all, that's where all started from.

2007-06-11
testfloatnum.c
- added test cases to _raiseposi
- added test_raisei;
---
floatpower.c
- fixed a bug in _raiseposi
- adapting scale in _raiseposi, so that the error
  is always < 1e-99 for 100-digit computations
---
all
- renamed arcsinh to arsinh, arccosh to arcosh and arctanh to artanh

2007-06-10
radix conversion is on its way.

floatconfig.h
- introduced a define MATHPRECISION, that controls to
  what maximum precision a higher mathematical function
  can be called
---
floatconvert.c
- changed return type of _bitsubstr to unsigned, so we
  can deal with more than one digit at a time.
- introduced type u_array
- fixed typo in name '_floatnum2uarray'
  fixed bug in _floatnum2array
- replaced all uarray2* by a generic uarray2str
---
floattrig.c
- using MATHPRECISION
---
floatcommon.c
- using MATHPRECISION
---
floatconst.h
- removed FLOATMAXPRECISION. MATHPRECISION has taken over
  its role
---
floatpower.h floatpower.c
- modified the interface of _raiseposi slightly
---
testfloatnum
- added test_floatnum2uarray
- added test_uarray2str
- added first testcases for _raiseposi, more pending

2007-06-09
floatlong.c floatlong.h
- added an overflow-checking addition routine _checkadd
- added an overflow-checking multiplication routine _checkmul
- moving _findfirstbit here and make it public
---
floatconvert.c
- using floatlong's version of _findfirstbit
---
floatpower.c
- removed _lgi
- use floatlong for exponent calculations
---
floatnum.c
- clean up: using _checkadd in float_setscientific
---
testfloatnum.c
- activated somehow dropped test_setzero, test_getsign, test_getlength,
  test_setscientific tests
- added test_checkadd
- added test_checkmul
- added test_longarrayadd
- added test_longarraymul
---
floatconfig.h
- removed define FLOATMATHTEST. FLOATNUMTEST is enough
---
all
- spelling: mathma.. replaced by mathema..

2007-06-08
heading towards the missing radix conversion routines. Necessary, before
a hmath version can be installed. As a side effect, the power operation
is developed

CMakeList.txt
- updated dependencies
---
floatlong.h floatlong.c
- introduced these two files to the code base. They contain a portable
  long integer arithmetic
---
testfloatnum.c
- added a final message
- added test cases for _longadd, _longmul, _longshr
---
floatnum.c
- using floatlong's _long* functions in float_setscientific instead of
  special bit pattern based integer overflow detection
---
floatexp.c
- in _exp: cleaned up the setting of the exponent and added a safety check
---
floatcommon.c floatcommon.h
- introduced a new function float_isinteger
- using floatlong's _long* functions in leadingdigits. Should now
  return correct results without exception
---
floatpower.h floatpower.c
- introduced these two files to the code base. They contain the basic
  routines for the power operation
---
floatconvert.h floatconvert.c
- introduced these two files to the code base. They contain the basic
  procedures for converting a number to a char array based on radix 16, 8, 2
---
floathmath.h
- added comments
---
all
- whitespace removing
- replaced 'unsigned int' by 'unsigned'

2007-06-07
The first target testfloatnum is compiling and running, and all tests are
passed.

CMakeList.txt
- updated dependencies
---
floatconfig.h:
- moved configuration settings into a separate file, floatconfig.h.
- introduced a define BITS_IN_EXP, the number of bits available for
  the exponent (including the sign of the exponent) in a floatnum. This
  definition is more basic than EXPMAX, and useful when implementing exponentiation.
---
floatnum.h
- introduced a new error code, FLOAT_UNSTABLE. It indicates a situation where
  the mathematically correct result cannot be evaluated due to limitations
  of the algorithm. Used with higher mathematical functions only, not with the
  basic operations in floatnum.
- updated many comments to reflect the latest state and to improve the style.
---
floatnum.c
- removed defines that are handled in floatconfig.h now
- fixed float_sqrt and float_round, where a spurious result value could be returned.
- declared _movepoint explicitly static void
- introduced a new function float_getdigit to access a single digit in
  a significand.
- removed superfluous variables
- updated and introduced new comments
---
testfloatnum.c
- removed defines that are handled in floatconfig.h now
- removed function declarations that were leftovers from changes
- removed conflicting definition of float_error
- correct initialization of floatnum module
- made tests verbous
- extended tests to higher mathematical functions
---
floatcommon.h, floatcommon.c
- introduced these two files to the code base. They contain declarations
  and definitions for helpers and convenience functions, used throughout
  the evaluation of higher mathematical functions
---
floatconst.h, floatconst.c
- introduced these two files to the code base. They contain declarations
  and definitions of constants used throughout the evaluation of higher
  mathematical functions
---
floatseries.h, floatseries.c
- introduced these two files to the code base. They contain declarations
  and definitions of routines for evaluating Taylor series of cos x - 1,
  cosh x - 1, arctan x, arctanh x, used throughout the evaluation of higher
  mathematical functions
---
floathmath.h floathmath.c
- introduced these two files to the code base. They contain declarations
  and definitions of the top level calls to higher mathematical functions
---
floatlog.h floatlog.c
- introduced these two files to the code base. They contain the basic
  routines for all functions related to the logarithm
---
floatexp.h floatexp.c
- introduced these two files to the code base. They contain the basic
  routines for all functions related to the exponential function
---
floattrig.h floattrig.c
- introduced these two files to the code base. They contain the basic
  routines for all functions related to the trigonometric functions and
  their inverses
---
hmath.h
- corrected comments related to hyperbolic functions. Hyperbolic functions
  are not based on angles, so they do not depend on any degree setting

2007-06-03

number.c:
- fixed a bug in bc's number.c, function bc-divide, that causes trouble when
  overwriting the dividend while dividing by 1. floatnum must have this fixed.
